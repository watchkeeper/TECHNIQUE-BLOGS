#!/usr/bin/env node
/*modle self define static server*/
const http = require('http')
const URL = require('url')
const path = require('path')
const fs = require('fs')
const util = require('util')
const child_process = require('child_process')

const config = require('./modle-server.conf')
const mime = require('./mime')


/*flag = true means sync*/
const file_exist = (filepath,flag)=>{
	if(flag){
		return fs.existsSync(filepath)
	}else{
		const pro = new Promise((yes,no)=>{
			fs.exists(filepath,(judge)=>{
				if(!judge){
					no(false)
				}else{
					yes(true)
				}
			})
		})
		return pro
	}
}

const file_read = (filepath)=>{
	const pro = new Promise((yes,no)=>{
		/*should be binary because of picture*/
		fs.readFile(filepath,'binary',(err,data)=>{
			if(err){
				no(false)
			}else{
				yes(data)
			}
		})
	})
	return pro
}

const file_stat = (path)=>{
	const pro = new Promise((yes,no)=>{
		fs.stat(path,(err,stats)=>{
			if(err){
				no(false)
			}else{
				yes(stats)
			}
		})
	})
	return pro
}

const server = http.createServer((req,res)=>{
	//***judge url
	const url = req.url
	/* for attach query string */
	const _uri = URL.parse(url).pathname
	let uri = `.${_uri}`
	//***judge mimeType deal
	const  _ext = path.extname(url)
	const ext = _ext?_ext.slice(1):'unknow'
	const mime_type = mime[ext] || 'text/html'
	console.log(`mime_type is ${mime_type}`)
	//**index setting
	// if(!_ext){
	// 	uri = `${uri}/${config.index}`
	// }
	console.log(`request uri is ${uri}`)
	//***judge file exists?
	file_exist(uri)
	.then((exists)=>{
		//get file type and decide weather show the list of document
		let [type] = []
		file_stat(uri)
		.then((stats)=>{
			console.log('stat show  isFile : '+stats.isFile())
			//is file , show page
			if(stats.isFile()){
				return  'file'
			}
			//is directory , show lists in it
			else if(stats.isDirectory()){
				return 'directory'
			}
		})
		//just return next then and can call series
		.then((type)=>{
			console.log('uri type is : '+type)
			//according to type adopt way
			switch(type){
				case 'file':
					file_read(uri)
					.then((data)=>{
						res.writeHead(200,{"Content-Type":mime_type})
						res.write(data,'binary')
						res.end()
					}).catch((err)=>{
						res.writeHead(500,{"Content-Type":mime_type})
						res.end("Some error occurs when read file")
					})
					break
				case 'directory':
					const main_page = `${uri}/${config.index}`
					//index page exists?
					file_exist(main_page)
					.then((exists)=>{
						file_read(main_page)
						.then((data)=>{
							res.writeHead(200,{"Content-Type":mime_type})
							res.write(data,'binary')
							res.end()
						}).catch((err)=>{
							res.writeHead(500,{"Content-Type":mime_type})
							res.end("Some error occurs when read file")
						})
					})
					//no index page will show directory
					.catch((exists)=>{
						fs.readdir(uri,(err,files)=>{
							if(err){
								res.writeHead(500,{"Content-Type":mime_type})
								res.end('Some error occurs when read directory')
								return 
							}
							//create show page to list directory use child_process
							const files_str = JSON.stringify(files)
							//there path ./bin/creator.js is not sure
							console.log(`node ./bin/creator.js ${uri} ${files_str}`)
							const c= child_process.exec(
								`node ./bin/creator.js ${uri} ${files_str}`,
								(err,stdout,stderr)=>{
									if(err){
										console.log(err)
										process.exit(1)
									}
									console.log(stdout)
									console.log('child_process_stderr_occur'+stderr)
									res.writeHead(200,{"Content-Type":mime_type})
									res.write(stdout)
									res.end()
								})
						})
					})
					break
			}
		})
		.catch((stat_flag)=>{
			res.writeHead(500,{"Content-Type":mime_type})
			res.end('Can not get file or directory message[fs.stat]! ')
		})
	})
	.catch((exists)=>{
		//any error above and reject will aggregate here 
		console.log('file exists flag '+exists)
		res.writeHead(404,{'Content-Type':mime_type,"the-key-is":"guess"})
		res.end('The file you request is not found!')
	})

})

server.listen(config.port)

child_process.exec(`start http://localhost:${config.port}`)

console.log(`modle-server is running at port ${config.port}`)
